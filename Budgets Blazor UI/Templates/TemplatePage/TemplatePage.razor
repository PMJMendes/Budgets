@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.BudgetDetails
@using Krypton.Budgets.Blazor.UI.Templates.TemplatePage.Navigator
@using Krypton.Budgets.Blazor.UI.Templates.TemplatesRoot

@inherits LocalizedLayout<TemplatesRouter>
@implements ITemplatePageController

<CascadingValue Value="@((ITemplatePageController)this)" IsFixed="true">
	<MudStack Spacing="0" Row="true" Class="viewport">
		@if (Model.CreateData == null && Model.EditData == null)
		{
			<MudContainer MaxWidth="MaxWidth.False" Class="navigator">
				<TemplateNavigator Model="@Model.NavData" />
			</MudContainer>
		}
		<MudContainer MaxWidth="MaxWidth.False" Class="page-content">
			@Body
		</MudContainer>
	</MudStack>
</CascadingValue>

@code {
	[CascadingParameter]
	public TemplatePageModel Model { get; set; } = TemplatePageModel.Empty();

	[CascadingParameter]
	public INavigator Navigator { get; set; } = default!;

	void ITemplatePageController.OnCreate()
	{
		var model = Model.ForCreate();
		Navigator.NavigateWithState("/templates/new", model);
	}

	void ITemplatePageController.OnClone()
	{
		var model = Model.ForClone();
		Navigator.NavigateWithState("/templates/new", model);
	}

	async Task ITemplatePageController.AfterCreateAsync(BudgetDetailsItem? results)
	{
		var model = Model.WithCreateResults(results);
		await Navigator.NavigateWithStateAsync("/templates/" + model.ViewData!.Id.ToString(), model);
	}

	void ITemplatePageController.OnCancelCreate()
	{
		Navigator.NavigateWithState("/templates", TemplatesRootModel.Empty());
	}

	void ITemplatePageController.OnView(Guid id)
	{
		var model = Model.ForView(id);
		Navigator.NavigateWithState("/templates/" + id.ToString(), model);
	}

	void ITemplatePageController.OnEdit()
	{
		var model = Model.ForEdit();
		Navigator.NavigateWithState("/templates/" + model.ViewData!.Id.ToString() + "/edit", model);
	}

	async Task ITemplatePageController.AfterEditAsync(BudgetDetailsItem? results)
	{
		var model = Model.WithEditResults(results).ForEdit();
		//await Navigator.NavigateWithStateAsync("/templates/" + model.ViewData!.Id.ToString(), model);
		await Task.CompletedTask;
	}

	void ITemplatePageController.OnCancelEdit()
	{
		var model = Model.CancelEdit();
		Navigator.NavigateWithState("/templates/" + model.ViewData!.Id.ToString(), model);
	}

	async Task ITemplatePageController.OnDeleteAsync()
	{
		await Navigator.NavigateWithStateAsync("/templates", TemplatesRootModel.Empty());
	}
}
