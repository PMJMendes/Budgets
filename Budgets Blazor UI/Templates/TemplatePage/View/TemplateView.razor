@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.DeleteBudget
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage._Core

@inherits LocalizedComponent<TemplatesRouter>

@inject IDialogService DialogService
@inject DeleteBudgetService DeleteService
@inject ISnackbar Snackbar

@if (Model is null)
{
	<MudContainer MaxWidth="MaxWidth.False" Class="justify-center align-center">
		<MudProgressCircular Size="Size.Large" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudStack Spacing="0" Class="viewport">
		@if (_loading)
		{
			<MudProgressLinear Indeterminate="true" />
			<MudOverlay />
		}

		<MudText Typo="Typo.h2">@(Model.Code) - @Model.TemplateData.FrontData.Title</MudText>

		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header buttons">
			<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Edit" OnClick="EditTemplate">@L["TEMPLATE:VIEW:ACTIONS:EDIT"]</MudButton>
			<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.FileCopy" Class="pl-2" OnClick="CloneBudget">@L["TEMPLATE:VIEW:ACTIONS:CLONE"]</MudButton>
			<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.DeleteForever" Class="pl-2" OnClick="Delete">@L["TEMPLATE:VIEW:ACTIONS:DELETE"]</MudButton>
		</MudContainer>

		<MudGrid Spacing="0" Class="viewport-header">
			<MudItem xs="6" Class="flex-column">
				<MudText Typo="Typo.h6">@L["TEMPLATE:FIELDS:CODE"]</MudText>
				<MudText Typo="Typo.body2">@Model.Code</MudText>
			</MudItem>
			<MudItem xs="6" Class="flex-column">
				<MudText Typo="Typo.h6">@L["TEMPLATE:FIELDS:TITLE"]</MudText>
				<MudText Typo="Typo.body2">@Model.TemplateData.FrontData.Title</MudText>
			</MudItem>
		</MudGrid>

		<BudgetViewer Class="viewport-container" Model="@Model.TemplateData" />
	</MudStack>
}

@code {
	private bool _loading = false;
	private bool shouldRender = true;

	[Parameter]
	public TemplateViewModel Model { get; set; } = TemplateViewModel.Empty();

	[CascadingParameter]
	public IErrorHandler Handler { get; set; } = default!;

	[CascadingParameter]
	public ITemplatePageController Page { get; set; } = default!;

	protected override bool ShouldRender() => shouldRender && base.ShouldRender();

	public void EditTemplate() => Page.OnEdit();

	private void CloneBudget() => Page.OnClone();

	private async Task Delete()
	{
		if (await Confirm(L["TEMPLATE:ACTIONS:DELETE:TITLE"], L["TEMPLATE:ACTIONS:DELETE:PROMPT"], L["TEMPLATE:ACTIONS:DELETE:CONFIRM"]))
		{
			_loading = true;
			var results = await DeleteService.DeleteBudgetAsync(TargetModel.ForId(Model.Id).AsPostArgs);
			await Handler.CheckErrorsAsync(results, async r =>
			{
				shouldRender = false;
				await Page.OnDeleteAsync();
				Snackbar.Add(L["TEMPLATE:ACTIONS:DELETE:SUCCESS"], Severity.Success);
			});
			_loading = false;
		}
	}

	private async Task<bool> Confirm(string title, string prompt, string confirm)
	{
		var result = await DialogService.ShowMessageBox(
			title,
			prompt,
			yesText: confirm,
			cancelText: @L["TEMPLATE:ACTIONS:CANCEL"]);

		return result ?? false;
	}
}
