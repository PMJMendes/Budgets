@using Krypton.Budgets.Blazor.APIClient._Common
@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.CloneBudget
@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.BudgetDetails
@using Krypton.Budgets.Blazor.APIClient.Global.CreateBudget
@using Krypton.Budgets.Blazor.UI.Budgets._Common

@inherits LocalizedComponent<TemplatesRouter>

@inject CreateBudgetService CreateService
@inject CloneBudgetService CloneService
@inject ISnackbar Snackbar

@if (Model is null)
{
	<MudContainer MaxWidth="MaxWidth.False" Class="justify-center align-center">
		<MudProgressCircular Size="Size.Large" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudStack Spacing="0" Class="viewport">
		@if (_loading)
		{
			<MudProgressLinear Indeterminate="true" />
			<MudOverlay />
		}

		<MudText Typo="Typo.h2">@L["TEMPLATE:CREATE:TITLE"]</MudText>

		<TemplateCreateForm @ref="TemplateForm" Model="@Model" />

		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header buttons justify-end pa-2">
			<MudButton OnClick="@CancelCreate">@L["TEMPLATE:CREATE:CANCEL"]</MudButton>
			<MudButton OnClick="@SaveChanges">@L["TEMPLATE:CREATE:OK"]</MudButton>
		</MudContainer>
	</MudStack>
}

@code {
	private bool _loading = false;
	private bool shouldRender = true;

	private TemplateCreateForm? TemplateForm = default!;

	[Parameter]
	public TemplateCreateModel Model { get; set; } = TemplateCreateModel.Empty();

	[CascadingParameter]
	public ITemplatePageController Page { get; set; } = default!;

	protected override bool ShouldRender() => shouldRender && base.ShouldRender();

	private void CancelCreate() => Page.OnCancelCreate();

	private async Task SaveChanges()
	{
		if (TemplateForm is TemplateCreateForm form && await form.PreValidate())
		{
			_loading = true;
			var results = await (Model.SourceId == Guid.Empty ? CreateTemplate() : CloneTemplate());

			if (TemplateForm is IErrorHandler handler)
			{
				await handler.CheckErrorsAsync(results, async r =>
				{
					shouldRender = false;
					await Page.AfterCreateAsync(r);
					Snackbar.Add(L["TEMPLATE:CREATE:SUCCESS"], Severity.Success);
				});
			}
			_loading = false;
		}
	}

	private async Task<SafeResult<BudgetDetailsItem>> CreateTemplate()
	{
		return await CreateService.CreateBudgetAsync(Model.AsCreateArgs());
	}

	private async Task<SafeResult<BudgetDetailsItem>> CloneTemplate()
	{
		return await CloneService.CloneBudgetAsync(Model.AsCloneArgs());
	}
}
