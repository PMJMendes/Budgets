@using Krypton.Budgets.Blazor.APIClient._Common
@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.BudgetDetails
@using Krypton.Budgets.Blazor.UI._Main
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage.View
@using SoloX.BlazorJsonLocalization

@inject BudgetDetailsService DetailsService
@inject ISnackbar Snackbar
@inject IStringLocalizer<MainRouter> ErrorL

<MudThemeProvider Theme="@printTheme" />

<MudGrid Spacing="0">
    <MudGrid Spacing="0" Style="page-break-after:always">
        <FrontPage Model="@model.BudgetData" Code="@model.Code" Lang="@lang" />
    </MudGrid>

    @foreach (var (group, index) in model.BudgetData.Groups.Select((g, i) => (g, i)))
    {
        <MudGrid Spacing="0" Class="border" Style="page-break-inside:avoid">
            <GroupBlock Model="@group" Number="@(index + 1)" Lang="@lang" />
        </MudGrid>
    }
</MudGrid>

@code {
    private BudgetViewModel model = BudgetViewModel.Empty();
    private string lang = "PT";

    private MudTheme printTheme = new()
    {
        Typography = new()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Helvetica", "Arial", "sans-serif" }
            },
            H4 = new()
            {
                FontSize = "14px",
                FontWeight = 700
            },
            H5 = new()
            {
                FontSize = "12px",
                FontWeight = 600
            },
            H6 = new()
            {
                FontSize = "10px",
                FontWeight = 500
            },
            Body1 = new()
            {
                FontSize = "9px",
                FontWeight = 400
            },
            Caption = new()
            {
                FontSize = "9px",
                FontWeight = 700
            }
        }
    };

    [CascadingParameter(Name = "RouteParameters")]
    IDictionary<string, object> parameters { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (parameters.TryGetValue("english", out object? maybeEng) && maybeEng is bool eng)
        {
            lang = eng ? "ENG" : "PT";
        }

        if (parameters.TryGetValue("id", out object? maybeId) && maybeId is Guid id)
        {
            await LoadBudget(id);
        }
    }

    private async Task LoadBudget(Guid id)
    {
        var result = await DetailsService.BudgetDetailsAsync(TargetModel.ForId(id).AsQueryArgs);

        if (result.IsErrors)
        {
            await ErrorL.LoadAsync();
            ShowSnackbar(result.Errors);
        }
        else
        {
            if (result.Result.FirstOrDefault() is BudgetDetailsItem item)
            {
                model = BudgetViewModel.FromService(item);
            }
        }
    }

    private void ShowSnackbar(ErrorResults errors)
    {
        if (errors.InvalidParams is IEnumerable<ErrorResultsItem> items)
        {
            foreach (var error in items.Where(e => e is not null))
            {
                Snackbar.Add(ErrorL["ERRORS:SERVICE:" + error!.Reason], Severity.Error);
            }
        }
    }
}
