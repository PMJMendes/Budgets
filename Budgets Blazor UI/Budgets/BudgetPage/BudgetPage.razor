@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.BudgetDetails
@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.ProductionDetails;
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage.Navigator
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage.View
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetsRoot
@using Krypton.Budgets.Blazor.UI.Budgets._Common;

@inherits LocalizedLayout<BudgetsRouter>
@implements IBudgetPageController

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<CascadingValue Value="@((IBudgetPageController)this)" IsFixed="true">
	<MudStack Spacing="0" Row="true" Class="viewport">
		@if (Model.CreateData == null && Model.EditData == null && Model.ManageData == null)
		{
			<MudContainer MaxWidth="MaxWidth.False" Class="navigator">
				<BudgetNavigator Model="@Model.NavData" />
			</MudContainer>
		}
		<MudContainer MaxWidth="MaxWidth.False" Class="page-content">
			@Body
		</MudContainer>
	</MudStack>
</CascadingValue>

@code {
	[CascadingParameter]
	public BudgetPageModel Model { get; set; } = BudgetPageModel.Empty();

	[CascadingParameter]
	public INavigator Navigator { get; set; } = default!;

	void IBudgetPageController.OnCreate()
	{
		var model = Model.ForCreate();
		Navigator.NavigateWithState("/budgets/new", model);
	}

	void IBudgetPageController.OnClone()
	{
		var model = Model.ForClone();
		Navigator.NavigateWithState("/budgets/new", model);
	}

	async Task IBudgetPageController.AfterCreateAsync(BudgetDetailsItem? results)
	{
		var model = Model.WithCreateResults(results);
		await Navigator.NavigateWithStateAsync("/budgets/" + model.ViewData!.Id.ToString(), model);
	}

	void IBudgetPageController.OnCancelCreate()
	{
		Navigator.NavigateWithState("/budgets", BudgetsRootModel.Empty());
	}

	void IBudgetPageController.OnView(Guid id)
	{
		var model = Model.ForView(id);
		Navigator.NavigateWithState("/budgets/" + id.ToString(), model);
	}

	async Task IBudgetPageController.OnPrint(System.Guid id, bool isEnglish)
	{
		var url = "print/" + id.ToString() + "/" + isEnglish;
		await JSRuntime.InvokeAsync<string>("open", $"{Navigation.BaseUri}/{url}", "_blank");
	}

	async Task IBudgetPageController.OnReport(System.Guid id)
	{
		var url = "report/" + id.ToString();
		await JSRuntime.InvokeAsync<string>("open", $"{Navigation.BaseUri}/{url}", "_blank");
	}

	void IBudgetPageController.OnEdit()
	{
		var model = Model.ForEdit();
		Navigator.NavigateWithState("/budgets/" + model.ViewData!.Id.ToString() + "/edit", model);
	}

	async Task IBudgetPageController.AfterEditAsync(BudgetDetailsItem? results)
	{
		Model = Model.WithEditResults(results).ForEdit();
		//await Navigator.NavigateWithStateAsync("/budgets/" + model.ViewData!.Id.ToString(), model);
		await Task.CompletedTask;
	}

	void IBudgetPageController.OnCancelEdit()
	{
		var model = Model.CancelEdit();
		Navigator.NavigateWithState("/budgets/" + model.ViewData!.Id.ToString(), model);
	}

	void IBudgetPageController.OnManage()
	{
		var model = Model.ForManage();
		Navigator.NavigateWithState("/budgets/" + model.ViewData!.Id.ToString() + "/manage", model);
	}

	async Task IBudgetPageController.AfterManageAsync(ProductionDetailsItem? results)
	{
		Model = Model.WithManageResults(results).ForManage();
		//await Navigator.NavigateWithStateAsync("/budgets/" + model.ViewData!.Id.ToString(), model);
		await Task.CompletedTask;
	}

	async Task IBudgetPageController.OnStateChangedAsync(BudgetState state)
	{
		await Navigator.RefreshWithStateAsync(Model.WithSelectedUserState(state));
	}

	async Task IBudgetPageController.OnDeleteAsync()
	{
		await Navigator.NavigateWithStateAsync("/budgets", BudgetsRootModel.Empty());
	}
}
