@using FluentValidation
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage._Core
@using Krypton.Budgets.Shared
@using ValueType = Krypton.Budgets.Shared.ValueType

@inherits ErrorHandlingForm<BudgetsRouter, BudgetModel>

<MudForm @ref="Form" Class="@Class">
    <MudStack Spacing="0" Class="viewport">
        <MudGrid Class="viewport-header">
            <MudItem xs="3">
                <MudSelect @bind-Value="@selectedSupplier" @bind-Value:after="@OnSupplierSelected"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:SUPPLIER"]">
                    @if (Model is not null)
                    {
                        @foreach (var supplier in suppliers)
                        {
                            <MudSelectItem Value="supplier" />
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value:get="@selectedCostByItem" @bind-Value:set="@(value => OnCostSelectedByItem(value))"
                           ToStringFunc="@(c => c is null ? "" : c?.Group.Description + " -> " + c?.Category.Description + " -> " + c?.Item.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:ITEM"]">
                    @if (selectedSupplier is not null)
                    {
                        @foreach (var cost in costs)
                        {
                            <MudSelectItem Value="(CostSelector?)cost">
                                @(cost.Group.Description + " -> " + cost.Category.Description + " -> " + cost.Item.Description)
                            </MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudTextField Value="@selectedCost?.CostValue?.AsAnyValue()" ReadOnly="true"
                              Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:COST_VALUE"]" />
            </MudItem>
            <MudItem xs="7">
                <MudSelect @bind-Value:get="@selectedCostByNotes" @bind-Value:set="@(value => OnCostSelectedByNotes(value))"
                           ToStringFunc="@(c => c?.Cost.Text)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:COST_TEXT"]">
                    @if (selectedSupplier is not null)
                    {
                        @foreach (var cost in costs)
                        {
                            <MudSelectItem Value="(CostSelector?)cost">@cost.Cost.Text</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudTextField @bind-Value="invoiceNumber" Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:NUMBER"]" />
            </MudItem>
            <MudItem xs="2">
                <MudNumericField Format="N2" @bind-Value="@invoicedValue" Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:VALUE"]" />
            </MudItem>
            <MudItem xs="1" Class="justify-end">
                <MudButton StartIcon="@Icons.Material.Filled.AddCircleOutline" OnClick="@(_ => OnCreateInvoice())"
                           Disabled="@(selectedItem is null || invoiceNumber is null || invoicedValue is null)">
                    @L["BUDGET:MANAGE:TABS:INVOICING:CREATE_INVOICE"]
                </MudButton>
            </MudItem>
        </MudGrid>

        <MudDivider Class="viewport-header" />
        
        <MudGrid Class="viewport-header">
            <MudItem xs="4">
                <MudSelect @bind-Value="@selectedGroup" @bind-Value:after="@OnGroupSelected" ToStringFunc="@(g => g?.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:GROUP"]">
                    @if (Model is not null)
                    {
                        @foreach (var group in Model.Groups)
                        {
                            <MudSelectItem Value="group">@group.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4">
                <MudSelect @bind-Value="@selectedCat" @bind-Value:after="@OnCatSelected" ToStringFunc="@(c => c?.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:CATEGORY"]">
                    @if (selectedGroup is not null)
                    {
                        @foreach (var category in selectedGroup.Categories)
                        {
                            <MudSelectItem Value="category">@category.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4">
                <MudSelect @bind-Value="@selectedItem" @bind-Value:after="@OnItemSelected" ToStringFunc="@(c => c?.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:ITEM"]">
                    @if (selectedCat is not null)
                    {
                        @foreach (var item in selectedCat.Items)
                        {
                            <MudSelectItem Value="item">@item.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudDivider Class="viewport-header" />

        @if (selectedItem is not null)
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Class="viewport-body item-list"
                         Items="@invoices" ReadOnly="false" EditMode="DataGridEditMode.Cell" SortMode="SortMode.None">
                <Columns>
                    <TemplateColumn T="InvoiceModel" Field="Supplier" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:SUPPLIER"]">
                        <EditTemplate>
                            <MudTextField @bind-Value="@context.Item.Supplier" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="InvoiceModel" Field="Text" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:TEXT"]">
                        <EditTemplate>
                            <MudTextField @bind-Value="@context.Item.Text" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="InvoiceModel" Field="Text" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:NUMBER"]">
                        <EditTemplate>
                            <MudTextField @bind-Value="@context.Item.InvoiceNumber" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="InvoiceModel" Field="InvoicedValue" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:VALUE"]">
                        <EditTemplate>
                            <MudNumericField Format="N2" @bind-Value="@context.Item.InvoicedValue" />
                        </EditTemplate>
                    </TemplateColumn>

                    <TemplateColumn T="InvoiceModel" IsEditable="false">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever"
                                           OnClick="@(_ => OnDeleteInvoice(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Class="viewport-body item-list"
                         Items="@invoices">
                <Columns>
                    <TemplateColumn T="InvoiceModel" Field="Supplier" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:SUPPLIER"]" />
                    <TemplateColumn T="InvoiceModel" Field="InvoicedValue" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:VALUE"]" />
                    <TemplateColumn T="InvoiceModel" Field="Text" Title="@L["BUDGET:MANAGE:TABS:INVOICING:FIELDS:TEXT"]" />
                </Columns>
            </MudDataGrid>
        }

        <MudButton Class="viewport-header justify-start pl-4" StartIcon="@Icons.Material.Filled.AddCircleOutline"
                   OnClick="@(_ => OnAddInvoice())" Disabled="@(selectedItem is null)">
            @L["BUDGET:MANAGE:TABS:INVOICING:NEW_INVOICE"]
        </MudButton>

        <MudStack Row="true" Class="viewport-header">
            <MudStack Spacing="0">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:WEATHER_DAYS"]</MudText>
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:VALUE"]</MudText>
                <MudText Typo="Typo.body2">@((Model.PercentsData.WeatherTotal ?? 0m).AsAnyValue())</MudText>
                <MudNumericField Format="D" @bind-Value="@Model.PercentsData.NWeatherDays"
                                 Label="@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:NUM_WDAYS"]" />
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:TOTAL"]</MudText>
                <MudText Typo="Typo.body2">@(((IBudget)Model).WeatherInvoiced.AsAnyValue())</MudText>
            </MudStack>
            <MudSpacer />
            <MudGrid Spacing="0" Class="flex-1">
                <MudItem xs="2" />
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:TOTALS"]</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:BUDGET"]</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:COSTS"]</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:INVOICED"]</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:NOT_INVOICED"]</MudText>
                </MudItem>
                <MudItem xs="2" />
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:ITEM"]</MudText>
                </MudItem>
                @if (selectedItem is IItem item)
                {
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@item.ProdValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@item.CostValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@item.InvoicedValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@item.InvoiceDelta.AsAnyValue()</MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="8" />
                }
                <MudItem xs="2" />
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:CATEGORY"]</MudText>
                </MudItem>
                @if (selectedCat is ICategory cat)
                {
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@cat.ProdValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@cat.CostValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@cat.InvoicedValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@cat.InvoiceDelta.AsAnyValue()</MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="8" />
                }
                <MudItem xs="2" />
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:GROUP"]</MudText>
                </MudItem>
                @if (selectedGroup is IGroup group)
                {
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@group.ProdValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@group.CostValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@group.InvoicedValue.AsAnyValue()</MudText>
                    </MudItem>
                    <MudItem xs="2">
                        <MudText Typo="Typo.body2">@group.InvoiceDelta.AsAnyValue()</MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="8" />
                }
                <MudItem xs="2" />
                <MudItem xs="2">
                    <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:INVOICING:TOTALS:TOTAL"]</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.body2">@(((IBudget)Model).ProdValue.AsAnyValue())</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.body2">@(((IBudget)Model).CostValue.AsAnyValue())</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.body2">@(((IBudget)Model).InvoicedValue.AsAnyValue())</MudText>
                </MudItem>
                <MudItem xs="2">
                    <MudText Typo="Typo.body2">@(((IBudget)Model).InvoiceDelta.AsAnyValue())</MudText>
                </MudItem>
            </MudGrid>
        </MudStack>
    </MudStack>
</MudForm>

@code {
    private GroupModel? selectedGroup = null;
    private CategoryModel? selectedCat = null;
    private ItemModel? selectedItem = null;
    private IEnumerable<InvoiceModel>? invoices => selectedItem?.Invoices;

    private IEnumerable<string> suppliers => Model.Groups.SelectMany(g => g.Categories.SelectMany(c => c.Items.SelectMany(i =>
        i.Costs.Where(ct => ct.Supplier is not null).Select(ct => ct.Supplier!)
    ))).Distinct().OrderBy(s => s);
    private string? selectedSupplier = null;
    private IEnumerable<CostSelector> costs => selectedSupplier is string ?
        Model.Groups.SelectMany(g => g.Categories.SelectMany(c => c.Items.SelectMany(
            i => i.Costs.Where(ct => ct.Supplier == selectedSupplier).Select(ct => new CostSelector(g, c, i, ct))
    ))) : Array.Empty<CostSelector>();
    private CostSelector? selectedCostByItem = null;
    private CostSelector? selectedCostByNotes = null;
    private CostModel? selectedCost => selectedCostByItem?.Cost ?? selectedCostByNotes?.Cost;

    private string? invoiceNumber = null;
    private decimal? invoicedValue = null;

    [Parameter]
    public BudgetModel Model { get; set; } = BudgetModel.Empty();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private void OnGroupSelected()
    {
        selectedCat = null;
        selectedItem = null;

        selectedSupplier = null;
        selectedCostByItem = null;
        selectedCostByNotes = null;
    }

    private void OnCatSelected()
    {
        selectedItem = null;

        selectedSupplier = null;
        selectedCostByItem = null;
        selectedCostByNotes = null;
    }

    private void OnItemSelected()
    {
        selectedSupplier = null;
        selectedCostByItem = null;
        selectedCostByNotes = null;
    }

    private void OnSupplierSelected()
    {
        selectedCostByItem = null;
        selectedCostByNotes = null;

        invoiceNumber = null;
        invoicedValue = null;
    }

    private void OnCostSelectedByItem(CostSelector? value)
    {
        if (value != selectedCostByItem)
        {
            selectedCostByItem = value;

            if (value is not null)
            {
                selectedCostByNotes = null;

                selectedGroup = value?.Group;
                selectedCat = value?.Category;
                selectedItem = value?.Item;

                invoiceNumber = null;
                invoicedValue = null;
            }
        }
    }

    private void OnCostSelectedByNotes(CostSelector? value)
    {
        if (value != selectedCostByNotes)
        {
            selectedCostByNotes = value;

            if (value is not null)
            {
                selectedCostByItem = null;

                selectedGroup = value?.Group;
                selectedCat = value?.Category;
                selectedItem = value?.Item;

                invoiceNumber = null;
                invoicedValue = null;
            }
        }
    }

    private void OnCreateInvoice()
    {
        selectedItem!.AddInvoice(InvoiceModel.FromData(
            invoicedValue,
            invoiceNumber,
            selectedSupplier,
            selectedCost?.Text
        ));

        invoiceNumber = null;
        invoicedValue = null;
    }

    private void OnAddInvoice() => selectedItem!.AddInvoice(InvoiceModel.Empty());

    private void OnDeleteInvoice(InvoiceModel item) => selectedItem!.RemoveInvoice(item);

    private record struct CostSelector(GroupModel Group, CategoryModel Category, ItemModel Item, CostModel Cost);
}
