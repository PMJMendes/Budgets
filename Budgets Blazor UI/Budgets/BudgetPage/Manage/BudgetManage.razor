@using Krypton.Budgets.Blazor.APIClient.Budgets.Budget.ManageBudget
@using Krypton.Budgets.Blazor.UI.Budgets._Common

@inherits LocalizedComponent<BudgetsRouter>

@inject ManageBudgetService Service
@inject ISnackbar Snackbar

@if (Model is null)
{
	<MudContainer MaxWidth="MaxWidth.False" Class="justify-center align-center">
		<MudProgressCircular Size="Size.Large" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudStack Spacing="0" Class="viewport">
		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header">
			<MudText Typo="Typo.h2">@(Model.Code) - @Model.BudgetData.FrontData.Title</MudText>
		</MudContainer>

		@if (_loading)
		{
			<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header">
				<MudProgressLinear Indeterminate="true" />
				<MudOverlay />
			</MudContainer>
		}

		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-body">
			<BudgetManageForm @ref="Form" Model="@Model.BudgetData" />
		</MudContainer>

		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header buttons justify-end pa-2">
			<MudButton OnClick="@CancelEdit">@L["BUDGET:EDIT:CANCEL"]</MudButton>
			<MudButton Class="pl-2" OnClick="@SaveChanges">@L["BUDGET:EDIT:OK"]</MudButton>
		</MudContainer>
	</MudStack>
}

@code {
	private bool _loading;

	private BudgetManageForm? Form = default!;

	[Parameter]
	public BudgetManageModel Model { get; set; } = BudgetManageModel.Empty();

	[CascadingParameter]
	public IBudgetPageController Page { get; set; } = default!;

	private void CancelEdit() => Page.OnCancelEdit();

	private async Task SaveChanges()
	{
		if (Form is BudgetManageForm form && await form.PreValidate())
		{
			_loading = true;
			var results = await Service.ManageBudgetAsync(Model.AsManageArgs());

			if (Form is IErrorHandler handler)
			{
				await handler.CheckErrorsAsync(results, async r =>
				{
					await Page.AfterManageAsync(r);
					Snackbar.Add(L["BUDGET:MANAGE:SUCCESS"], Severity.Success);
				});
			}
			_loading = false;
		}
	}
}
