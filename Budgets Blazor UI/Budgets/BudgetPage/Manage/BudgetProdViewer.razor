@using FluentValidation
@using Krypton.Budgets.Shared
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage._Core
@using ValueType = Krypton.Budgets.Shared.ValueType

@inherits LocalizedComponent<BudgetsRouter>

<MudContainer MaxWidth="MaxWidth.False" Class="@Class">
    <MudStack Spacing="0" Class="viewport">
        <MudGrid Class="viewport-header">
            <MudItem xs="6">
                <MudSelect @bind-Value="@selectedGroup" @bind-Value:after="@OnGroupSelected" ToStringFunc="@(g => g?.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:GROUP"]">
                    @if (Model is not null)
                    {
                        @foreach (var group in Model.Groups)
                        {
                            <MudSelectItem Value="group">@group.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value:get="@selectedCat" @bind-Value:set="@(async value => await OnCategorySelectedAsync(value))"
                           ToStringFunc="@(c => c?.Description)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:CATEGORY"]">
                    @if (selectedGroup is not null)
                    {
                        @foreach (var category in selectedGroup.Categories)
                        {
                            <MudSelectItem Value="category">@category.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudDivider Class="viewport-header" />

        @if (selectedCat is not null)
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Class="viewport-body item-list"
                         Items="@items" SortMode="SortMode.None">
                <Columns>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:DESCRIPTION"]">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@context.Item.Description</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    @foreach (var def in selectedCat.Defs.Where(d => d.Type == ValueType.NUMBER))
                    {
                        <TemplateColumn T="ItemModel" Title="@def.Description">
                            <CellTemplate>
                                @if (!((IItem)context.Item).IsPercent)
                                {
                                    @if (context.Item[def.Description] is ValueModel model)
                                    {
                                        <MudText Typo="Typo.body2">@model.ProdValue?.AsAnyValue()</MudText>
                                    }
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }

                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:TOTAL"]">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@context.Item.ProdValue.AsAnyValue()</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:INTERNAL"]">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@context.Item.Value.AsAnyValue()</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:PROVISIONAL"]">
                        <CellTemplate>
                            <MudText Typo="Typo.body2">@(((IItem)context.Item).Provisional.AsAnyValue())</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Class="viewport-body"
                         Items="@items">
                <Columns>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:DESCRIPTION"]" />
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:TOTAL"]" />
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:INTERNAL"]" />
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:MANAGE:TABS:BUDGET:FIELDS:PROVISIONAL"]" />
                </Columns>
            </MudDataGrid>
        }

        <MudGrid Spacing="0" Class="viewport-header">
            <MudItem xs="3" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:TOTALS"]: </MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:TOTAL"]: </MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:INTERNAL"]: </MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:PROVISIONAL"]: </MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:COSTS"]: </MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:MARGIN"]: </MudText>
            </MudItem>
            <MudItem xs="3" />
            <MudItem xs="3" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:CATEGORY"]: </MudText>
            </MudItem>
            @if (selectedCat is ICategory cat)
            {
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.ProdValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.Value.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.Provisional.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.CostValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.Margin.AsAnyValue()</MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="5" />
            }
            <MudItem xs="3" />
            <MudItem xs="3" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:GROUP"]: </MudText>
            </MudItem>
            @if (selectedGroup is IGroup group)
            {
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.ProdValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.Value.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.Provisional.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.CostValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.Margin.AsAnyValue()</MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="5" />
            }
            <MudItem xs="3" />
            <MudItem xs="3" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:HPROD"]:</MudText>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).ProducerValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).ProducerValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1" />
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).ProducerValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="3" />
            <MudItem xs="3" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:TOTAL"]:</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).ProdValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).Value.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).Provisional.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).CostValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).Margin.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="3" />
        </MudGrid>
    </MudStack>
</MudContainer>

@code {
    private static readonly ItemModel[] _empty = new[] { ItemModel.Empty() };

    private GroupModel? selectedGroup = null;
    private CategoryModel? selectedCat = null;
    private IEnumerable<ItemModel>? items => selectedCat?.Items.DefaultIfEmpty(ItemModel.Empty()) ?? _empty;

    [Parameter]
    public BudgetModel Model { get; set; } = BudgetModel.Empty();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private void OnGroupSelected()
    {
        selectedCat = null;
    }

    private async Task OnCategorySelectedAsync(CategoryModel cat)
    {
        if (selectedCat != cat)
        {
            selectedCat = null;

            await Task.Delay(1);
            selectedCat = cat;
        }
    }
}
