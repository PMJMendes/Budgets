@using Krypton.Budgets.Blazor.APIClient.Global.SearchBudgets
@using Krypton.Budgets.Blazor.UI.Budgets._Common
@using Krypton.Budgets.Blazor.UI.Users._Common

@inherits LocalizedComponent<BudgetsRouter>

@inject SearchBudgetsService Service

<MudStack Spacing="0" Class="viewport">
    <MudContainer MaxWidth="MaxWidth.False" Class="viewport-header">
        <MudText Typo="Typo.h1" Class="pa-2">@L["BUDGET:NAVIGATOR:TITLE"]</MudText>
        @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
        {
            <MudSpacer />
            <MudContainer MaxWidth="MaxWidth.False" Class="flex-1 pa-2">
                <BudgetsSearchForm Small="true" Model="@Model.SearchArgs"
                                   ModelChanged="@OnSearchModelChanged" OnSearch="@OnSearch" />
                <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" OnClick="@OnCreateNew" Class="pl-2" />
            </MudContainer>
        }
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.False" Class="viewport-body">
        @if (_loading)
        {
            <MudContainer MaxWidth="MaxWidth.False" Class="justify-center align-center">
                <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            </MudContainer>
        }
        else
        {
            <BudgetNavigatorList Model="@Model.Budgets" SelectedID="@Model.SelectedId" BudgetSelected="@OnBudgetSelected" />
        }
    </MudContainer>
</MudStack>

@code {
    private bool _loading = false;

    [Parameter]
    public BudgetNavigatorModel Model { get; set; } = BudgetNavigatorModel.Empty();

    [CascadingParameter]
    public SecurityLevel Level { get; set; }

    [CascadingParameter]
    public IBudgetPageController Page { get; set; } = default!;

    [CascadingParameter]
    public IErrorHandler Handler { get; set; } = default!;

    private void OnSearchModelChanged(BudgetsSearchModel model)
    {
        Model = Model.WithSearchArgs(model);
    }

    private async Task OnSearch()
    {
        _loading = true;
        var results = await Service.SearchBudgetsAsync(Model.SearchArgs.AsArgs());
        await Handler.CheckErrorsAsync(results, r => Model = Model.WithSearchResults(r));
        _loading = false;
    }

    private void OnCreateNew()
    {
        Page.OnCreate();
    }

    private void OnBudgetSelected(Guid id)
    {
        Page.OnView(id);
    }
}
