@using FluentValidation
@using Krypton.Budgets.Blazor.UI.Budgets.BudgetPage._Core

@inherits ErrorHandlingForm<BudgetsRouter, CategoryModel>

@if (Model is null)
{
	<MudForm @ref="Form">
		<MudGrid>
			<MudItem xs="12" Class="flex-column">
				<MudTextField T="string" Disabled="true" Label="@L["CATEGORY:FIELDS:FORMULA"]" />
			</MudItem>
			<MudItem xs="6" Class="flex-column">
				<MudTextField T="string" Disabled="true" Label="@L["CATEGORY:FIELDS:DESCRIPTION"]" />
			</MudItem>
			<MudItem xs="6" Class="flex-column">
				<MudTextField T="string" Disabled="true" Label="@L["CATEGORY:FIELDS:DESCENGLISH"]" />
			</MudItem>
		</MudGrid>
	</MudForm>
}
else
{
	<MudForm @ref="Form" Model="@Model" Validation="@Validator.ValidateValue">
		<MudGrid>
			<MudItem xs="12" Class="flex-column">
				<MudTextField @ref="focusField" Variant="Variant.Text" Label="@L["CATEGORY:FIELDS:FORMULA"]"
							  @bind-Value="Model.Formula" For="@(() => Model.Formula)" />
			</MudItem>
			<MudItem xs="6" Class="flex-column">
				<MudTextField Variant="Variant.Text" Label="@L["CATEGORY:FIELDS:DESCRIPTION"]"
							  @bind-Value="Model.Description" For="@(() => Model.Description)" />
			</MudItem>
			<MudItem xs="6" Class="flex-column">
				<MudTextField Variant="Variant.Text" Label="@L["CATEGORY:FIELDS:DESCENGLISH"]"
							  @bind-Value="Model.DescEnglish" For="@(() => Model.DescEnglish)" />
			</MudItem>
		</MudGrid>
	</MudForm>
}

@code {
	private MudTextField<string>? focusField = default!;

	[Parameter]
	public CategoryModel Model { get; set; } = default!;

	public async Task SetFocus()
	{
		if (focusField is not null)
		{
			await focusField.FocusAsync();
		}
	}

	protected override void ConfigureValidator(AbstractValidator<CategoryModel> validator)
	{
		validator.When(m => m is not null, () =>
		{
			validator.RuleFor(m => m.Formula).
				NotEmpty().
				WithMessage(_ => ErrorL["ERRORS:FORM:VALUE_REQUIRED"]);

			validator.RuleFor(m => m.Description).
				NotEmpty().
				WithMessage(_ => ErrorL["ERRORS:FORM:VALUE_REQUIRED"]);
		});
	}
}
