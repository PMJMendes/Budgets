@using FluentValidation
@using Krypton.Budgets.Blazor.UI.Users._Common
@using Krypton.Budgets.Shared
@using ValueType = Krypton.Budgets.Shared.ValueType

@inherits LocalizedComponent<BudgetsRouter>

<MudGrid Spacing="0" Class="@Class">
    <MudItem xs="2" Class="justify-end">
        <MudText>@L["BUDGET:VIEW:FIELDS:GROUP"]: </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudSelect @bind-Value="@selectedGroup" @bind-Value:after="@OnGroupSelected" ToStringFunc="@(g => g?.Description)"
                    AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
            @if (Model is not null)
            {
                @foreach (var group in Model.Groups)
                {
                    <MudSelectItem Value="group">@group.Description</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="2" Class="justify-end">
        <MudText>@L["BUDGET:VIEW:FIELDS:CATEGORY"]: </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudSelect @bind-Value:get="@selectedCat" @bind-Value:set="@(async value => await OnCategorySelectedAsync(value))"
                    ToStringFunc="@(c => c?.Description)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
            @if (selectedGroup is not null)
            {
                @foreach (var category in selectedGroup.Categories)
                {
                    <MudSelectItem Value="category">@category.Description</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudDivider />
    </MudItem>
    <MudItem xs="12">
        @if (selectedCat is not null)
        {
            <MudDataGrid Items="@items" Elevation="0" Class="page-layout">
                <Columns>
                    <TemplateColumn T="ItemModel" Field="Description" Title="@L["BUDGET:VIEW:FIELDS:DESCRIPTION"]" />

                    @foreach (var def in selectedCat.Defs)
                    {
                        <TemplateColumn T="ItemModel" Title="@( def.Description + (def.Type == ValueType.TEXT ? "/" + L["BUDGET:VIEW:FIELDS:ENGLISH"] : ""))">
                            <CellTemplate>
                                @if (!((IItem)context.Item).IsPercent && context.Item[def.Description] is ValueModel model)
                                {
                                    @if (def.Type == ValueType.NUMBER)
                                    {
                                        <MudText>@model.NumberValue?.AsAnyValue()</MudText>
                                    }
                                    else
                                    {
                                        <MudText>@model.TextValue</MudText>
                                        @("/")
                                        <MudText>@model.TextEnglish</MudText>
                                    }
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    }

                    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
                    {
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:BASE"]">
                            <CellTemplate>
                                <MudText>@(((IItem)context.Item).BaseValue.AsAnyValue())</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:INTERNAL"]">
                            <CellTemplate>
                                <MudText>@context.Item.Value.AsAnyValue()</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:CLIENT"]">
                            <CellTemplate>
                                <MudText>@context.Item.ClientValue.AsAnyValue()</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                    }
                    else
                    {
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:TOTAL"]">
                            <CellTemplate>
                                <MudText>@context.Item.Value.AsAnyValue()</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                    }
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Items="@items" Elevation="0" Class="page-layout">
                <Columns>
                    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
                    {
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:BASE"]" />
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:INTERNAL"]" />
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:CLIENT"]" />
                    }
                    else
                    {
                        <TemplateColumn T="ItemModel" Title="@L["BUDGET:VIEW:FIELDS:TOTAL"]" />
                    }
                </Columns>
            </MudDataGrid>
        }
    </MudItem>
    <MudItem xs="4" />
    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
    {
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:TOTALS"]: </MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:BASE"]</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:INTERNAL"]</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:CLIENT"]</MudText>
        </MudItem>
    }
    else
    {
        <MudItem xs="2">
            <MudText>@L["BUDGET:VIEW:TOTALS:TOTALS"]: </MudText>
        </MudItem>
        <MudItem xs="2" />
    }
    <MudItem xs="4" />
    <MudItem xs="4" />
    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
    {
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:CATEGORY"]: </MudText>
        </MudItem>
        @if (selectedCat is ICategory cat)
        {
            <MudItem xs="1">
                <MudText>@cat.BaseValue.AsAnyValue()</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText>@cat.Value.AsAnyValue()</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText>@cat.ClientValue.AsAnyValue()</MudText>
            </MudItem>
        }
        else
        {
            <MudItem xs="3" />
        }
    }
    else
    {
        <MudItem xs="2">
            <MudText>@L["BUDGET:VIEW:TOTALS:CATEGORY"]: </MudText>
        </MudItem>
        @if (selectedCat is ICategory cat)
        {
            <MudItem xs="2">
                <MudText>@cat.Value.AsAnyValue()</MudText>
            </MudItem>
        }
        else
        {
            <MudItem xs="2" />
        }
    }
    <MudItem xs="4" />
    <MudItem xs="4" />
    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
    {
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:GROUP"]: </MudText>
        </MudItem>
        @if (selectedGroup is IGroup group)
        {
            <MudItem xs="1">
                <MudText>@group.BaseValue.AsAnyValue()</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText>@group.Value.AsAnyValue()</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText>@group.ClientValue.AsAnyValue()</MudText>
            </MudItem>
        }
        else
        {
            <MudItem xs="3" />
        }
    }
    else
    {
        <MudItem xs="2">
            <MudText>@L["BUDGET:VIEW:TOTALS:GROUP"]: </MudText>
        </MudItem>
        @if (selectedGroup is IGroup group)
        {
            <MudItem xs="2">
                <MudText>@group.Value.AsAnyValue()</MudText>
            </MudItem>
        }
        else
        {
            <MudItem xs="2" />
        }
    }
    <MudItem xs="4" />
    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
    {
        <MudItem xs="4" />
        <MudItem xs="1">
            <MudText>@L["BUDGET:MANAGE:TABS:BUDGET:TOTALS:HPROD"]:</MudText>
        </MudItem>
        <MudItem xs="1" />
        <MudItem xs="1">
            <MudText>@(((IBudget)Model).ProducerValue.AsAnyValue())</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@(((IBudget)Model).BCAProducerValue.AsAnyValue())</MudText>
        </MudItem>
        <MudItem xs="4" />
    }
    <MudItem xs="4" />
    @if (Level == SecurityLevel.ADMIN || Level == SecurityLevel.PRODUCER)
    {
        <MudItem xs="1">
            <MudText>@L["BUDGET:VIEW:TOTALS:TOTAL"]:</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@(((IBudget)Model).BaseValue.AsAnyValue())</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@(((IBudget)Model).Value.AsAnyValue())</MudText>
        </MudItem>
        <MudItem xs="1">
            <MudText>@(((IBudget)Model).ClientValue.AsAnyValue())</MudText>
        </MudItem>
    }
    else
    {
        <MudItem xs="2">
            <MudText>@L["BUDGET:VIEW:TOTALS:TOTAL"]:</MudText>
        </MudItem>
        <MudItem xs="2">
            <MudText>@(((IBudget)Model).Value.AsAnyValue())</MudText>
        </MudItem>
    }
    <MudItem xs="4" />
</MudGrid>

@code {
    private static readonly ItemModel[] _empty = new[] { ItemModel.Empty() };

    private GroupModel? selectedGroup = null;
    private CategoryModel? selectedCat = null;
    private IEnumerable<ItemModel>? items => selectedCat?.Items.DefaultIfEmpty(ItemModel.Empty()) ?? _empty;

    [Parameter]
    public BudgetModel Model { get; set; } = BudgetModel.Empty();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [CascadingParameter]
    public SecurityLevel Level { get; set; }

    private void OnGroupSelected()
    {
        selectedCat = null;
    }

    private async Task OnCategorySelectedAsync(CategoryModel cat)
    {
        if (selectedCat != cat)
        {
            selectedCat = null;

            await Task.Delay(1);
            selectedCat = cat;
        }
    }
}
