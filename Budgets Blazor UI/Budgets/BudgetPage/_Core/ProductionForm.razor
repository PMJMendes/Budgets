@using FluentValidation
@using Krypton.Budgets.Shared
@using ValueType = Krypton.Budgets.Shared.ValueType

@inherits ErrorHandlingForm<BudgetsRouter, BudgetModel>

<MudForm @ref="Form">
    <MudGrid Spacing="0" Class="@Class">
        <MudItem xs="2" Class="justify-end">
            <MudText>@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:GROUP"]: </MudText>
        </MudItem>
        <MudItem xs="4">
            <MudSelect @bind-Value="@selectedGroup" @bind-Value:after="@OnGroupSelected" ToStringFunc="@(g => g?.Description)"
                       AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                @if (Model is not null)
                {
                    @foreach (var group in Model.Groups)
                    {
                        <MudSelectItem Value="group">@group.Description</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="2" Class="justify-end">
            <MudText>@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:CATEGORY"]: </MudText>
        </MudItem>
        <MudItem xs="4">
            <MudSelect @bind-Value:get="@selectedCat" @bind-Value:set="@(async value => await OnCategorySelectedAsync(value))"
                       ToStringFunc="@(c => c?.Description)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                @if (selectedGroup is not null)
                {
                    @foreach (var category in selectedGroup.Categories)
                    {
                        <MudSelectItem Value="category">@category.Description</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            @if (selectedCat is not null)
            {
                <MudDataGrid Items="@items" Elevation="0" ReadOnly="false" EditMode="DataGridEditMode.Cell" Class="page-layout">
                    <Columns>
                        <TemplateColumn T="ItemModel" Field="Description" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:DESCRIPTION"]">
                            <CellTemplate>
                                <MudText>@context.Item.Description</MudText>
                            </CellTemplate>
                        </TemplateColumn>

                        @foreach (var def in selectedCat.Defs.Where(d => d.Type == ValueType.NUMBER))
                        {
                            <TemplateColumn T="ItemModel" IsEditable="false" Title="@def.Description">
                                <CellTemplate>
                                    @if (context.Item[def.Description] is ValueModel model)
                                    {
                                        <MudText>@model.NumberValue?.AsAnyValue()</MudText>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:PRODCOL"]">
                                <CellTemplate>
                                    @if (context.Item[def.Description] is ValueModel model)
                                    {
                                        <MudText>@model.ProdValue?.AsAnyValue()</MudText>
                                    }
                                </CellTemplate>
                                <EditTemplate>
                                    @if (context.Item[def.Description] is ValueModel model)
                                    {
                                        <MudNumericField Format="N2" @bind-Value:get="@model.ProdValue"
                                                         @bind-Value:set="@(value => OnSetValue(context.Item, model, value))" />
                                    }
                                </EditTemplate>
                            </TemplateColumn>
                        }

                        <TemplateColumn T="ItemModel" Field="Value" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:TOTAL"]">
                            <CellTemplate>
                                <MudText>@context.Item.Value.AsAnyValue()</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="ItemModel" Field="ProdValue" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:PRODUCTION"]">
                            <CellTemplate>
                                <MudText>@context.Item.ProdValue.AsAnyValue()</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="ItemModel" Field="ProdValue" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:DELTA"]">
                            <CellTemplate>
                                <MudText>@(((IItem)context.Item).ProdDelta.AsAnyValue())</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
            else
            {
                <MudDataGrid Items="@items" Elevation="0" Class="page-layout">
                    <Columns>
                        <TemplateColumn T="ItemModel" Field="Description" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:DESCRIPTION"]" />
                        <TemplateColumn T="ItemModel" Field="Value" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:TOTAL"]" />
                        <TemplateColumn T="ItemModel" Field="ProdValue" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:TOTAL"]" />
                        <TemplateColumn T="ItemModel" Field="Value" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:PRODUCTION:FIELDS:TOTAL"]" />
                    </Columns>
                </MudDataGrid>
            }
        </MudItem>
        <MudItem xs="4" />
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:TOTALS"]</MudItem>
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:BASE"]</MudItem>
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:PRODUCTION"]</MudItem>
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:DELTA"]</MudItem>
        <MudItem xs="4" />
        <MudItem xs="4" />
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:CATEGORY"]</MudItem>
        @if (selectedCat is ICategory cat)
        {
            <MudItem xs="1">@cat.BaseValue.AsAnyValue()</MudItem>
            <MudItem xs="1">@cat.ProdValue.AsAnyValue()</MudItem>
            <MudItem xs="1">@cat.ProdDelta.AsAnyValue()</MudItem>
        }
        else
        {
            <MudItem xs="3" />
        }
        <MudItem xs="4" />
        <MudItem xs="4" />
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:GROUP"]</MudItem>
        @if (selectedGroup is IGroup group)
        {
            <MudItem xs="1">@group.BaseValue.AsAnyValue()</MudItem>
            <MudItem xs="1">@group.ProdValue.AsAnyValue()</MudItem>
            <MudItem xs="1">@group.ProdDelta.AsAnyValue()</MudItem>
        }
        else
        {
            <MudItem xs="3" />
        }
        <MudItem xs="4" />
        <MudItem xs="4" />
        <MudItem xs="1">@L["BUDGET:EDIT:TABS:PRODUCTION:TOTALS:TOTAL"]</MudItem>
        <MudItem xs="1">@(((IBudget)Model).BaseValue.AsAnyValue())</MudItem>
        <MudItem xs="1">@(((IBudget)Model).ProdValue.AsAnyValue())</MudItem>
        <MudItem xs="1">@(((IBudget)Model).ProdDelta.AsAnyValue())</MudItem>
        <MudItem xs="4" />
    </MudGrid>
</MudForm>

@code {
    private GroupModel? selectedGroup = null;
    private CategoryModel? selectedCat = null;
    private IEnumerable<ItemModel>? items => selectedCat?.Items.Where(i => !i.ExcludeFromBase);

    [Parameter]
    public BudgetModel Model { get; set; } = BudgetModel.Empty();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private void OnGroupSelected()
    {
        selectedCat = null;
    }

    private async Task OnCategorySelectedAsync(CategoryModel cat)
    {
        if (selectedCat != cat)
        {
            selectedCat = null;

            await Task.Delay(1);
            selectedCat = cat;
        }
    }

    private void OnSetValue(ItemModel item, ValueModel model, decimal? value)
    {
        model.ProdValue = value;
        ((IItem)item).RecalculateProd();
    }
}
