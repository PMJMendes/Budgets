@using FluentValidation
@using Krypton.Budgets.Shared
@using ValueType = Krypton.Budgets.Shared.ValueType

@inherits ErrorHandlingForm<BudgetsRouter, BudgetModel>

<MudForm @ref="Form" Class="@Class">
    <MudStack Spacing="0" Class="viewport">
        <MudGrid Class="viewport-header">
            <MudItem xs="6">
                <MudSelect @bind-Value="@selectedGroup" @bind-Value:after="@OnGroupSelected" ToStringFunc="@(g => g?.Description)"
                           AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:VIEW:FIELDS:GROUP"]">
                    @if (Model is not null)
                    {
                        @foreach (var group in Model.Groups)
                        {
                            <MudSelectItem Value="group">@group.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect @bind-Value:get="@selectedCat" @bind-Value:set="@(async value => await OnCategorySelectedAsync(value))"
                           ToStringFunc="@(c => c?.Description)" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
                           Label="@L["BUDGET:VIEW:FIELDS:CATEGORY"]">
                    @if (selectedGroup is not null)
                    {
                        @foreach (var category in selectedGroup.Categories)
                        {
                            <MudSelectItem Value="category">@category.Description</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudDivider Class="viewport-header" />

        @if (selectedCat is not null)
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Dense="true" Class="viewport-body item-list"
                         Items="@items" ReadOnly="false" EditMode="DataGridEditMode.Cell" SortMode="SortMode.None">
                <Columns>
                    <TemplateColumn T="ItemModel" IsEditable="false">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.ArrowDropUp"
                                           OnClick="@(_ => OnItemUp(context.Item))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.ArrowDropDown"
                                           OnClick="@(_ => OnItemDown(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:DESCRIPTION"]">
                        <EditTemplate>
                            <MudTextField @bind-Value="@context.Item.Description" Required="true"
                                          RequiredError="@ErrorL["ERRORS:FORM:VALUE_REQUIRED"]" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:DESCENGLISH"]">
                        <EditTemplate>
                            <MudTextField @bind-Value="@context.Item.DescEnglish" />
                        </EditTemplate>
                    </TemplateColumn>
@*
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:EXCLUDEFROMBASE"]">
                        <EditTemplate>
                            <MudSwitch @bind-Value="@context.Item.ExcludeFromBase" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:CANBEPERCENT"]">
                        <EditTemplate>
                            <MudSwitch @bind-Value="@context.Item.CanBePercent" />
                        </EditTemplate>
                    </TemplateColumn>
*@
                    @foreach (var def in selectedCat.Defs)
                    {
                        <TemplateColumn T="ItemModel" Title="@( def.Description + (def.Type == ValueType.TEXT ? "/" + L["BUDGET:EDIT:TABS:VALUES:FIELDS:ENGLISH"] : ""))">
                            <CellTemplate>
                                @if (context.Item[def.Description] is ValueModel model)
                                {
                                    @if (def.Type == ValueType.NUMBER)
                                    {
                                        @model.NumberValue?.AsAnyValue()
                                    }
                                    else
                                    {
                                        @model.TextValue
                                    }
                                }
                            </CellTemplate>
                            <EditTemplate>
                                @if (context.Item[def.Description] is ValueModel model)
                                {
                                    @if (def.Type == ValueType.NUMBER)
                                    {
                                        <MudNumericField Format="N2" @bind-Value:get="@model.NumberValue"
                                                         @bind-Value:set="@(value => OnSetValue(context.Item, model, value))" />
                                    }
                                    else
                                    {
                                        <MudContainer Class="flex-row">
                                            <MudTextField @bind-Value="@model.TextValue" />
                                            @("/")
                                            <MudTextField @bind-Value="@model.TextEnglish" />
                                        </MudContainer>
                                    }
                                }
                            </EditTemplate>
                        </TemplateColumn>
                    }

                    <TemplateColumn T="ItemModel" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:TOTAL"]">
                        <CellTemplate>
                            <MudText>@context.Item.Value.AsAnyValue()</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn T="ItemModel" IsEditable="false">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever"
                                            OnClick="@(_ => OnDeleteItem(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudDataGrid Elevation="0" FixedHeader="true" Height="100%" Class="viewport-body item-list"
                         Items="@items">
                <Columns>
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:DESCRIPTION"]" />
                    <TemplateColumn T="ItemModel" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:DESCENGLISH"]" />
                    <TemplateColumn T="ItemModel" IsEditable="false" Title="@L["BUDGET:EDIT:TABS:VALUES:FIELDS:TOTAL"]" />
                </Columns>
            </MudDataGrid>
        }

        <MudButton Class="viewport-header justify-start pl-4" StartIcon="@Icons.Material.Filled.AddCircleOutline"
                   OnClick="@(_ => OnAddItem())" Disabled="@(selectedCat is null)">
            @L["BUDGET:EDIT:TABS:VALUES:NEW_ITEM"]
        </MudButton>

        <MudGrid Spacing="0" Class="viewport-header">
            <MudItem xs="4" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:TOTALS"]</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:BASE"]</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:INTERNAL"]</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:CLIENT"]</MudText>
            </MudItem>
            <MudItem xs="4" />
            <MudItem xs="4" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:CATEGORY"]</MudText>
            </MudItem>
            @if (selectedCat is ICategory cat)
            {
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.BaseValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.Value.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@cat.ClientValue.AsAnyValue()</MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="3" />
            }
            <MudItem xs="4" />
            <MudItem xs="4" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:GROUP"]</MudText>
            </MudItem>
            @if (selectedGroup is IGroup group)
            {
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.BaseValue.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.Value.AsAnyValue()</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudText Typo="Typo.body2">@group.ClientValue.AsAnyValue()</MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="3" />
            }
            <MudItem xs="4" />
            <MudItem xs="4" />
            <MudItem xs="1">
                <MudText Typo="Typo.h6">@L["BUDGET:EDIT:TABS:VALUES:TOTALS:TOTAL"]</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).BaseValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).Value.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="1">
                <MudText Typo="Typo.body2">@(((IBudget)Model).ClientValue.AsAnyValue())</MudText>
            </MudItem>
            <MudItem xs="4" />
        </MudGrid>
    </MudStack>
</MudForm>

    @code {
    private GroupModel? selectedGroup = null;
    private CategoryModel? selectedCat = null;
    private IEnumerable<ItemModel>? items => selectedCat?.Items;

    [Parameter]
    public BudgetModel Model { get; set; } = BudgetModel.Empty();

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private void OnGroupSelected()
    {
        selectedCat = null;
    }

    private async Task OnCategorySelectedAsync(CategoryModel cat)
    {
        if (selectedCat != cat)
        {
            selectedCat = null;

            await Task.Delay(1);
            selectedCat = cat;
        }
    }

    private void OnAddItem()
    {
        selectedCat!.AddItem(ItemModel.Empty());
    }

    private void OnDeleteItem(ItemModel item)
    {
        selectedCat!.RemoveItem(item);
    }

    private void OnItemUp(ItemModel item)
    {
        selectedCat!.ItemUp(item);
    }

    private void OnItemDown(ItemModel item)
    {
        selectedCat!.ItemDown(item);
    }

    private void OnSetValue(ItemModel item, ValueModel model, decimal? value)
    {
        model.NumberValue = value;
        model.ProdValue = value;
        item.Percent = null;
        ((IItem)item).RecalculateBase();
        ((IItem)item).Recalculate(((IBudget)Model).BaseValue);
        ((IItem)item).RecalculateClientTotal(((IBudget)Model).Value);
        ((IItem)item).RecalculateProd();
    }
}
