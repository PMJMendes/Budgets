@using FluentValidation
@using Krypton.Budgets.Blazor.UI.Users._Common

@inherits ErrorHandlingForm<UsersRouter, UserModel>

<MudForm @ref="Form" Model="@Model" Validation="@Validator.ValidateValue">
	<MudGrid>
		<MudItem xs="6">
			<MudTextField Variant="Variant.Text" Label="@L["USER:FIELDS:EMAIL"]"
						  @bind-Value="Model.Email" For="@(() => Model.Email)" />
		</MudItem>
		<MudItem xs="6">
			<MudSelect @bind-Value="@Model.Level" ToStringFunc="@(v => L["ENUMS:SECURITY_LEVEL:" + v])"
					   AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft"
					   Label="@L["USER:FIELDS:LEVEL"]">
                @foreach(var state in Enum.GetValues<SecurityLevel>())
                {
					<MudSelectItem Value="state">@L["ENUMS:SECURITY_LEVEL:" + state.ToString()]</MudSelectItem>
                }
            </MudSelect>
		</MudItem>
		<MudItem xs="12">
			<MudTextField Variant="Variant.Text" Label="@L["USER:FIELDS:FULLNAME"]"
						  @bind-Value="Model.FullName" For="@(() => Model.FullName)" />
		</MudItem>
	</MudGrid>
</MudForm>

@code {
	[Parameter]
	public UserModel Model { get; set; } = UserModel.Empty();

	protected override void ConfigureValidator(AbstractValidator<UserModel> validator)
	{
		validator.RuleFor(m => m.Email).
			NotEmpty().
			WithMessage(_ => ErrorL["ERRORS:FORM:VALUE_REQUIRED"]);

		validator.RuleFor(m => m.Level).
			Must(level => level != SecurityLevel._UNKNOWN).
			WithMessage(_ => ErrorL["ERRORS:FORM:VALUE_REQUIRED"]);

		validator.RuleFor(m => m.FullName).
			NotEmpty().
			WithMessage(_ => ErrorL["ERRORS:FORM:VALUE_REQUIRED"]);
	}
}
