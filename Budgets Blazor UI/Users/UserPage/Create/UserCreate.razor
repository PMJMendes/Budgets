@using Krypton.Budgets.Blazor.APIClient.Global.CreateUser
@using Krypton.Budgets.Blazor.UI.Users.UserPage._Core

@inherits LocalizedComponent<UsersRouter>

@inject CreateUserService Service
@inject ISnackbar Snackbar

@if (Model is null)
{
	<MudContainer Class="justify-center align-center">
		<MudProgressCircular Size="Size.Large" Indeterminate="true" />
	</MudContainer>
}
else
{
	<MudStack Spacing="0" Class="viewport">
		@if (_loading)
		{
			<MudProgressLinear Indeterminate="true" />
			<MudOverlay />
		}

		<MudText Typo="Typo.h2">@L["USER:CREATE:TITLE"]</MudText>

		<UserForm @ref="UserForm" Model="@Model.UserData" />

		<MudContainer MaxWidth="MaxWidth.False" Class="viewport-header buttons justify-end pa-2">
			<MudButton OnClick="@CancelCreate">@L["USER:CREATE:CANCEL"]</MudButton>
			<MudButton OnClick="@SaveChanges">@L["USER:CREATE:OK"]</MudButton>
		</MudContainer>
	</MudStack>
}

@code {
	private bool _loading = false;
	private bool shouldRender = true;

	private UserForm? UserForm = default!;

	[Parameter]
	public UserCreateModel Model { get; set; } = UserCreateModel.Empty();

	[CascadingParameter]
	public IUserPageController Page { get; set; } = default!;

	protected override bool ShouldRender() => shouldRender && base.ShouldRender();

	private void CancelCreate() => Page.OnCancelCreate();

	private async Task SaveChanges()
	{
		if (UserForm is UserForm form && await form.PreValidate())
		{
			_loading = true;
			var results = await Service.CreateUserAsync(Model.AsArgs());

			if (UserForm is IErrorHandler handler)
			{
				await handler.CheckErrorsAsync(results, async r =>
				{
					shouldRender = false;
					await Page.AfterCreateAsync(r);
					Snackbar.Add(L["USER:CREATE:SUCCESS"], Severity.Success);
				});
			}
			_loading = false;
		}
	}
}
